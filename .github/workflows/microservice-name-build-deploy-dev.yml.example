name: CI/CD Pipeline


on:
  push:
    branches:
      - master


env:
  project-directory: ./

jobs:
  test:
    name: Test API Project
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip-ci')
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: npm clean install
        run: npm ci
        working-directory: ${{ env.project-directory }}
      - name: run ESLint
        run: npm run lint
        working-directory: ${{ env.project-directory }}
      - name: build api project
        run: npm run build
        working-directory: ${{ env.project-directory }}
      - name: run api tests
        run: npm run test:ci
        working-directory: ${{ env.project-directory }}

  release:
    name: Release semantic version
    needs: test
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip-ci') &&
      github.event_name == 'push' &&
      github.repository == 'Greenstand/${{ github.event.repository.name }}'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - run: npm i -g semantic-release @semantic-release/{git,exec,changelog}
      - run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
        with:
          path: ./
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build snapshot and push on merge
        id: docker_build_release
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: greenstand/treetracker-microservice-name:${{ steps.package-version.outputs.current-version }}
      - id: export_bumped_version
        run: |
          export BUMPED_VERSION="${{ steps.package-version.outputs.current-version }}"
          echo "::set-output name=bumped_version::${BUMPED_VERSION}"
    outputs:
      bumped_version: ${{ steps.export_bumped_version.outputs.bumped_version }}


  deploy:
    name: Deploy latest to development environment
    runs-on: ubuntu-latest
    needs: release
    if: |
      !contains(github.event.head_commit.message, 'skip-ci') &&
      github.event_name == 'push' &&
      github.repository_owner == 'Greenstand'
    steps:
    - uses: actions/checkout@v2
    - name: get-npm-version
      id: package-version
      uses: martinbeentjes/npm-get-version-action@master
      with:
        path: ./
    - name: Download tag name
      uses: actions/download-artifact@v1
      with:
        name: image-tag-${{github.sha}}
    - name: Set image tag name 
      id: image-tag-name
      run: |
        value=`cat image-tag-${{github.sha}}/image-tag`
        echo "::set-output name=image-tag-name::$value"
    - name: Install kustomize
      run: curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - name: Run kustomize
      run: (cd deployment/base && ../../kustomize edit set image greenstand/${{ github.event.repository.name }}:${{ steps.image-tag-name.outputs.image-tag-name }} )
    - name: Install doctl for kubernetes
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.ENV_DIGITALOCEAN_TOKEN }}
    - name: Save DigitalOcean kubeconfig
      run: doctl kubernetes cluster kubeconfig save ${{ secrets.ENV_CLUSTER_NAME }}
    - name: Delete completed migration jobs prior to deployment # Only needed if microservice contains db migrations
      run: kubectl -n #namespace# delete job wallet-db-migration-job
    - name: Update kubernetes resources
      run: kubectl -n #namespace# apply --wait -k ./deployment/

